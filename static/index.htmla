<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Browser-use sample</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <div class="control-panel">
            <textarea id="task-input" rows="5" placeholder="Enter task"></textarea>
            <!-- <div class="file-upload">
                <input type="file" id="file-input" class="file-input">
                <label id="file-label" for="file-input">📎 Attach file</label>
            </div> -->
            <div class="sensitive-data-panel">
            </div>
            <div class="button-panel">
                <a id="config-btn" class="btn" href="config.html" target="_blank">⚙️</a>
                <div id="vnc-status" class="status-text">Xvnc</div>
                <div id="ws-status" class="status-text">WS</div>
                <div id="chrome-status" class="status-text">Chrome</div>
                <button id="browser-btn" class="btn">🔘</button>
                <select id="mode-select" class="mode-select">
                    <option value="0">Operator</option>
                    <option value="1">Research</option>
                </select>
                <button id="execute-task-btn" class="btn" disabled>Submit</button>
            </div>
            <div id="log-output"></div>
        </div>
        <div class="vnc-viewer">
            <div id="vnc-container"></div>
        </div>
    </div>

    <script>
        let session_id = null;
        let isVncRunning = false;
        let isBrowserRunning = 0;
        let isTaskRunning = true;
        const taskInput = document.getElementById('task-input');
        const executeTaskBtn = document.getElementById('execute-task-btn');
        const vncStatus = document.getElementById('vnc-status');
        const wsStatus = document.getElementById('ws-status');
        const chromeStatus = document.getElementById('chrome-status');
        const toggleBtn = document.getElementById('browser-btn');
        const logOutput = document.getElementById('log-output');
        const vncContainer = document.getElementById('vnc-container');
        taskInput.disabled = true;
        executeTaskBtn.disabled = true;
        toggleBtn.disabled = true;

        // Common function to create an openable container
        function createCollapsibleContainer(id, className, no) {
            // A div that wraps the entire container
            const container = document.createElement("div");
            container.id = id;
            container.className = `${className}-container logoutput-container`;
            
            // Header (clickable)
            const header = document.createElement("div");
            header.className = "logoutput-container-header";
            header.addEventListener("click", function() {
                this.parentElement.classList.toggle("collapsed");
            });
            const index = document.createElement("span");
            index.className = "logoutput-container-index";
            index.textContent = `${className} #${no}`;
            header.appendChild(index);
            const title = document.createElement("span");
            title.className = "logoutput-container-title";
            header.appendChild(title);

            // Div to store the content
            const content = document.createElement("div");
            content.className = "logoutput-container-content";
            
            // Assemble the structure
            container.appendChild(header);
            container.appendChild(content);
            
            return {
                container: container,
                header: title,
                content: content
            };
        }
        function ensureContainer(parent, className, no) {
            const parentId = parent.parentElement?.id;
            const Id = parentId ? parentId + '-' + className + '-' + no : className + '-' + no;

            // Find an existing container
            let actDiv = document.getElementById(Id);
            let actHeader;
            let actContent;
            // If the container does not exist, create a new one.
            if (!actDiv) {
                const actContainer = createCollapsibleContainer(Id, className, no);
                actDiv = actContainer.container;
                actHeader = actContainer.header;
                actContent = actContainer.content;
                parent.appendChild(actDiv);
            } else {
                actHeader = actDiv.querySelector(".logoutput-container-title");
                actContent = actDiv.querySelector(".logoutput-container-content");
            }
            return [actHeader,actContent];
        }

        function logPrint4(task, agent, step, act, header, msg, progress) {
            //console.log('task:',task,'agent:',agent,'step:',step,'act:',act,'header:',header,'msg:',msg,'progress:',progress)
            let headerContent = null;
            let parentContent = logOutput;
            if (task > 0) {
                // Generate a task ID
                [headerContent,parentContent] = ensureContainer(parentContent, 'task', task);
                if (agent > 0) {
                    // Generate an agent ID.
                    [headerContent,parentContent] = ensureContainer(parentContent, 'agent', agent);                        
                    if (step > 0) {
                        // Generate a step ID
                        [headerContent,parentContent] = ensureContainer(parentContent, 'step', step);                        
                        if (act > 0) {
                            // Generate an action ID.
                            [headerContent,parentContent] = ensureContainer(parentContent, 'action', act);
                        }
                    }
                }
                if( header && headerContent ) {
                    headerContent.textContent = `${header}`;
                }
                if( progress ) {
                    const newline = document.createElement("div");
                    newline.textContent = `progress:${progress}`;
                    parentContent.appendChild(newline);
                }
            }
            // Add a message
            if( msg) {
                const newline = document.createElement("div");
                newline.textContent = msg;
                parentContent.appendChild(newline);
                // Scroll to the bottom
                logOutput.scrollTop = logOutput.scrollHeight;
            }
        }

        function logPrint(msg) {
            logPrint4(0,0,0,0,'',msg,null);
        }

        // Start SSE connection
        function updateIndicator(elem,stat) {
            if(stat) {
                elem.classList.remove('stopped')
                elem.classList.add('running')
            } else {
                elem.classList.remove('running')
                elem.classList.add('stopped')
            }
        }
        function xx_update_status(data) {
            try {
                if( data.sid ) {
                    session_id = data.sid;
                    taskInput.disabled = false;
                    executeTaskBtn.disabled = taskInput.value.trim() === '';
                    toggleBtn.disabled = false;
                }
                if (data.status != 'success') {
                    if( data.status ) {
                        logPrint( data.status+':'+data.msg);
                    } else {
                        logPrint('error:'+data.msg);
                    }
                    return;
                }

                const srv = data.sv;
                const vnc_port = Number.isInteger(data.vnc) && data.vnc>0 ? data.vnc : 0;
                const ws_port = Number.isInteger(data.ws) && data.ws>0 ? data.ws : 0;
                const br_port = Number.isInteger(data.br) && data.br>0 ? data.br : 0;
                const is_task = Number.isInteger(data.task) && data.task>0 ? true: false;
                updateIndicator(vncStatus,vnc_port>0);
                vncStatus.innerText = vnc_port>0 ? 'Xvnc:'+vnc_port : 'Xvnc'
                updateIndicator(wsStatus,ws_port>0);
                updateIndicator(chromeStatus,br_port>0);
                if(vnc_port>0 && ws_port>0 ) {
                    if(!isVncRunning) {
                        isVncRunning = true;
                        startVNC(srv,ws_port)
                    }
                } else {
                    if(isVncRunning) {
                        isVncRunning = false;
                        stopVNC();
                    }
                }
                if( vnc_port>0 || ws_port>0 || br_port>0 ) {
                    isBrowserRunning = 1;
                    toggleBtn.textContent = '⛔️';
                } else {
                    isBrowserRunning = 0;
                    toggleBtn.textContent = '🔘';
                }
                toggleBtn.disabled = !session_id;
                if( isTaskRunning != is_task ) {
                    isTaskRunning = is_task;
                    if( is_task ) {
                        executeTaskBtn.textContent = 'Cancel';
                        executeTaskBtn.classList.add('cancel');
                        executeTaskBtn.disabled = !session_id;
                    } else {
                        executeTaskBtn.textContent = 'Submit';
                        executeTaskBtn.classList.remove('cancel');
                        executeTaskBtn.disabled = taskInput.value.trim() === '';
                    }
                }
                const header = data.header || '';
                const msg = data.msg || '';
                const progress = data.progress ?? null;
                if( header || msg || progress ) {
                    const n_task = data.task || 0;
                    const n_agent = data.agent || 0;
                    const n_step = data.step || 0;
                    const n_act = data.act || 0;
                    logPrint4( n_task, n_agent, n_step, n_act, header, msg, progress)
                }
            } catch(ex) {

            }
        }
        // Start SSE connection
        const SessionKeeper = new EventSource('/api/session');
        SessionKeeper.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data)
                xx_update_status(data)
            }catch{

            }
        };
        SessionKeeper.onerror = (e) => {
            console.log('keep error',e)
            SessionKeeper.close();
            logPrint('disconnected')
        };

        function stopVNC() {
            const fr = document.getElementById('vnc-frame');
            if(fr) {
                fr.remove();
            }
        }

        function startVNC(host, port) {
            stopVNC();
            console.log('startVNC',host,port)
            const url = window.location.origin + '/novnc/vnc_lite.html?host=' + encodeURIComponent(host) + '&port=' + port + '&autoconnect=true&scale=true';
            vncContainer.innerHTML = `<iframe id="vnc-frame" src="${url}" style="width:100%;height:100%;border:none;"></iframe>`;
        }

        toggleBtn.addEventListener('click', () => {
            toggleBtn.disabled=true;
            const endpoint = isBrowserRunning>0 ? '/api/browser_stop' : '/api/browser_start';            
            fetch(endpoint, { method: 'POST', headers: {'X-session-ID': session_id }})
                .then(response => response.json())
                .then(data => xx_update_status(data))
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error has occurred.');
                });
        });

        // Monitor task inputs
        taskInput.addEventListener('input', () => {
            if (!isTaskRunning) {
                executeTaskBtn.disabled = taskInput.value.trim() === '';
            }
        });

        // Execute task/handle the cancel button
        executeTaskBtn.addEventListener('click', () => {
            if (!isTaskRunning) {
                startTask();
            } else {
                stopTask();
            }
        });

        // Sensitive Data Management
        const sensitiveDataPanel = document.querySelector('.sensitive-data-panel');
        const addSensitiveBtn = document.querySelector('.add-sensitive-btn');

        function createSensitiveDataForm(key = '', value = '') {
            const div = document.createElement('div');
            div.className = 'sensitive-data-form';
            div.innerHTML = `
                <input type="text" class="sensitive-key" placeholder="key" value="${key}">
                <input type="text" class="sensitive-value" placeholder="value" value="${value}">
                <button class="remove-sensitive-btn">×</button>
                <button class="add-sensitive-btn">+</button>
            `;
            div.querySelector('.add-sensitive-btn').addEventListener('click', handleAddSensitiveData);
            div.querySelector('.remove-sensitive-btn').addEventListener('click', (e) => {
                e.target.closest('.sensitive-data-form').remove();
            });

            return div;
        }

        function handleAddSensitiveData(e) {
            // Add a new input form
            sensitiveDataPanel.appendChild(createSensitiveDataForm());
            form.querySelector('.add-sensitive-btn').addEventListener('click', (e) => {
                    e.target.closest('.sensitive-data-form').remove();
             });
        }

        // Add the initial input form
        sensitiveDataPanel.appendChild(createSensitiveDataForm());

        // Start the task.
        async function startTask() {
            const task = taskInput.value.trim();
            if (!task) return;

            const mode = parseInt(document.getElementById('mode-select').value);

            // Collect sensitive data
            const sensitiveData = {};
            const forms = document.querySelectorAll('.sensitive-data-form');
            forms.forEach(form => {
                const key = form.querySelector('.sensitive-key').value.trim();
                const value = form.querySelector('.sensitive-value').value.trim();
                if (key && value) {
                    console.log('key:', key, 'value:', value);
                    sensitiveData[key] = value;
                }
            });
            console.log('sensitiveData:', sensitiveData);

            fetch('/api/task_start', { 
                method: 'POST', 
                headers: {
                    'Content-Type': 'application/json', 
                    'X-session-ID': session_id
                }, 
                body: JSON.stringify({ 
                    task: task,
                    fashion: fashion,
                    sensitive_data: Object.keys(sensitiveData).length > 0 ? sensitiveData : null
                }) 
            })
                .then(response => response.json())
                .then(data => xx_update_status(data))
                .catch(error => {
                    console.error('Error:', error);
                    logPrint('An error has occurred.');
                });
        }

        // Cancel the task.
        async function stopTask() {
            fetch('/api/task_stop', { method: 'POST', headers: {'X-session-ID': session_id }})
                .then(response => response.json())
                .then(data => xx_update_status(data))
                .catch(error => {
                    console.error('Error:', error);
                    logPrint('An error has occurred.');
                });
        }
    </script>
</body>
</html>
